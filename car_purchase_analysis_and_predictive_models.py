# -*- coding: utf-8 -*-
"""Car Purchase Analysis and Predictive Models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/169PUIpYJ57saNkaw2KYCxfua0FkPWZG0

Importing required libraries
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

"""Reading CSV data file"""

car_df = pd.read_csv("sample_data/car_data.csv")
car_df = car_df.apply(lambda x: x.str.strip() if x.dtype == "object" else x)

car_df.columns

"""Checking for null and duplicate values"""

car_df.info()

car_df.isna().sum()

car_df.duplicated().sum()

car_df.head()

"""Removing User ID column"""

car_df.drop("User ID", axis = "columns", inplace = True)

"""Descriptive stats for all the variables"""

car_df.describe()

car_df["Gender"].describe()

car_df["Gender"].value_counts()

car_df["Purchased"].value_counts()

"""Distribution of Annual Salary based on Gender"""

sns.histplot(x = "AnnualSalary", data = car_df, hue = "Gender")

"""Distribution of Age based on Gender"""

sns.histplot(x = "Age", data = car_df, hue = "Gender")

"""Distribution of Annual Salary based on Purchased"""

sns.histplot(x = "AnnualSalary", data = car_df, hue = "Purchased")

"""Distribution of Age based on Purchased"""

sns.histplot(x = "Age", data = car_df, hue = "Purchased")

"""Correlation of Purchased with other variables"""

car_df.corr(numeric_only = True)["Purchased"].sort_values()

"""Creating dummy variables"""

dummy_car_df = pd.get_dummies(car_df, drop_first = False)

dummy_car_df.head()

"""Removing Gender_Male from dummy dataframe"""

dummy_car_df.drop("Gender_Male", axis = "columns", inplace = True)

dummy_car_df.head()

"""Creating x and y variable for machine learning models"""

x = dummy_car_df[["Age", "AnnualSalary", "Gender_Female"]]
y = dummy_car_df["Purchased"]

"""Splitting dataset into training and testing dataset"""

from sklearn.model_selection import train_test_split as tts
x_train, x_test, y_train, y_test = tts(x, y, random_state = 42, test_size = 0.3)

"""Standardizing x variables in training and testing dataset"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_x_train = scaler.fit_transform(x_train)
scaled_x_test = scaler.fit_transform(x_test)

"""Creating function to calcualte accuracy score of machine learning models"""

from sklearn.metrics import accuracy_score
def model_metrics(predictions):
  print(f"Accuracy score of model is {round(accuracy_score(y_test, predictions), 4)}")

"""Creating Logistic Regression model"""

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(scaled_x_train, y_train)
predict_lr = lr.predict(scaled_x_test)
model_metrics(predict_lr)

"""Creating K Nearest Neighbors Classifier model"""

from sklearn.neighbors import KNeighborsClassifier
test_errors = []
for k in range(1, 30):
  knn = KNeighborsClassifier(n_neighbors = k)
  knn.fit(scaled_x_train, y_train)
  predict_knn = knn.predict(scaled_x_test)
  test_error_rate = 1 - accuracy_score(y_test, predict_knn)
  test_errors.append(test_error_rate)

"""Creating line graph for error rate for different k values"""

plt.plot(range(1, 30), test_errors)
plt.xlabel("K Neighbors")
plt.ylabel("Error Rate")
plt.show()

knn_model = KNeighborsClassifier(n_neighbors = 7)
knn_model.fit(scaled_x_train, y_train)
predict_knn_model = knn_model.predict(scaled_x_test)
model_metrics(predict_knn_model)

"""Identifying best parameters of K Nearest Neighbors Classifier model"""

from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline
knn = KNeighborsClassifier()
k_values = list(range(1, 30))
pipe = Pipeline(steps = [("knn", knn)])
param_grid = {"knn__n_neighbors":k_values}
cv_classifier = GridSearchCV(pipe, param_grid, cv = 5, scoring = "accuracy")

cv_classifier.fit(scaled_x_train, y_train)
print(cv_classifier.best_params_)

pred_gridknn = cv_classifier.predict(scaled_x_test)
model_metrics(pred_gridknn)

"""Identifying best parameters of Support Vector Classifier model"""

from sklearn.svm import SVC
svc = SVC()
param_grid_svc = {"C":[0.01, 0.1, 0.5, 1], "kernel":["linear", "rbf", "poly"]}
grid_svc = GridSearchCV(svc, param_grid_svc)

grid_svc.fit(scaled_x_train, y_train)
print(grid_svc.best_params_)

pred_gridsvc = grid_svc.predict(scaled_x_test)
model_metrics(pred_gridsvc)

"""Creating Decision Tree Classifier model"""

from sklearn.tree import DecisionTreeClassifier
dtc = DecisionTreeClassifier()
dtc.fit(scaled_x_train, y_train)
predict_dtc = dtc.predict(scaled_x_test)
model_metrics(predict_dtc)

"""Identifying best parameters of Random Forest Classifier model"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()
n_estimators = [22, 64, 128, 256]
max_features = [2, 3, 4]
bootstrap = [True, False]
oob_score = [True, False]
param_grid_rfc = {"n_estimators":n_estimators, "max_features":max_features, "bootstrap":bootstrap, "oob_score":oob_score}
grid_rfc = GridSearchCV(rfc, param_grid_rfc)
grid_rfc.fit(scaled_x_train, y_train)
print(grid_rfc.best_params_)

rfc_model = RandomForestClassifier(bootstrap = True, max_features = 4, n_estimators = 128, oob_score = False)

rfc_model.fit(scaled_x_train, y_train)
predict_gridrfc_model = rfc_model.predict(scaled_x_test)
model_metrics(predict_gridrfc_model)