# -*- coding: utf-8 -*-
"""Gold Price Analysis and ARIMA Predictive Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yYx54VSBfrDj7ryczItmfTta2AfKnVli

Importing required libraries
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns

"""Reading CSV data file"""

gold_df = pd.read_csv("sample_data/data.csv", index_col = "date", parse_dates = True)
gold_df = gold_df.apply(lambda x: x.str.strip() if x.dtype == "object" else x)

"""Checking for null values"""

gold_df.info()

gold_df.isnull().sum()

"""Descriptive stats for price variable"""

gold_df.describe()

gold_df.head()

gold_df.tail()

"""Plotting price of gold"""

gold_df.plot()

"""Creating dataframe for gold price from 2009-01-01 to 2018-01-01 and plotting"""

start_date = "2009-01-01"
end_date = "2018-01-01"
gold_df = gold_df.loc[(gold_df.index >= start_date) & (gold_df.index < end_date)]

gold_df.index.freq = "MS"
gold_df.plot()

"""Calculating rolling mean for gold price from 2009-01-01 to 2018-01-01 and plotting"""

gold_yearly = gold_df.rolling(window = 12).mean()

gold_yearly.plot()

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
plot_acf(gold_df["price"], lags = 12)

plot_pacf(gold_df["price"], lags = 12)

"""Creating function for adfuller test"""

from statsmodels.tsa.stattools import adfuller
def adf_test(series):
  result = adfuller(series, autolag = "AIC")
  labels = ["ADF Test Statistic", "p_value", "#_lags_used", "#_observations"]
  out = pd.Series(result[0:4], index = labels)
  print(out.to_string())
  if result[1] <= 0.05:
    print("Reject the null hypothesis. Data has no unit root and stationary")
  else:
    print("Failed to reject the null hypothesis. Data has a unit root and non-stationary")

adf_test(gold_df["price"])

"""Identifying best ARIMA model"""

from pmdarima import auto_arima
arima_fit = auto_arima(gold_df["price"], start_p = 0, start_q = 0, max_p = 10, max_q = 10, seasonal = False, trace = True)

"""Creating ARIMA model and plotting the forecated values"""

import statsmodels.api as sm
model = sm.tsa.arima.ARIMA(gold_df["price"], order = (1, 0, 1))
model_results = model.fit()
fcast = model_results.predict(start = len(gold_df), end = len(gold_df) + 24, typ = ("levels"))
fcast = fcast.rename("ARIMA 1,0,1 Forecast")

gold_df["price"].plot(legend = True)
fcast.plot(legend = True)